# 自定义View步骤 #
# 1. 自定义View的属性 #
    <?xml version="1.0" encoding="utf-8"?>
    <resources>
		<attr name="titleText" format="string"/>
		<attr name="titleTextColor" format="color"/>
		<attr name="titleTextSize" format="dimension"/>

		<declare-styleable name="CustomTextView">
		<attr name="titleText"/>
		<attr name="titleTextColor"/>
		<attr name="titleTextSize"/>
		</declare-styleable>
    </resources>

# 2. 在View的构造方法中获得我们自定义的属性 #

	    TypedArray typedArray = context.getTheme().obtainStyledAttributes(attrs,
	            R.styleable.CustomTextView, defStyleAttr, 0);
	    int tepedIndexCount = typedArray.getIndexCount();
	    for (int i = 0; i < tepedIndexCount; i++) {
	        int attr = typedArray.getIndex(i);
	        switch (attr) {
	            case R.styleable.CustomTextView_titleText:
	                mTitleText = typedArray.getString(attr);
	                break;
	            case R.styleable.CustomTextView_titleTextColor:
	                mTitleColor = typedArray.getColor(attr, Color.BLACK);
	                break;
	            case R.styleable.CustomTextView_titleTextSize:
	                //默认设置为16sp,TypedValue也可以把sp转化为px
	                mTitleSize = typedArray.getDimensionPixelSize(attr, (int) TypedValue.applyDimension(
	                        TypedValue.COMPLEX_UNIT_SP, 16, getResources().getDisplayMetrics()));
	                break;
	        }
	    }
	    typedArray.recycle();
# 3. 重写onMesure #

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        int widthMode = MeasureSpec.getMode(widthMeasureSpec);
        int widthSize = MeasureSpec.getSize(widthMeasureSpec);
        int heightMode = MeasureSpec.getMode(heightMeasureSpec);
        int heightSize = MeasureSpec.getSize(heightMeasureSpec);
        int width;
        int height;

        if (widthMode == MeasureSpec.EXACTLY) {
            width = widthSize;
        } else {
            mPaint.setTextSize(mTitleSize);
            mPaint.getTextBounds(mTitleText, 0, mTitleText.length(), mBoundRect);
            float textWidth = mBoundRect.width();
            int desired = (int) (getPaddingLeft() + textWidth + getPaddingRight());
            width = desired;
        }

        if (heightMode == MeasureSpec.EXACTLY) {
            height = heightSize;
        } else {
            mPaint.setTextSize(mTitleSize);
            mPaint.getTextBounds(mTitleText, 0, mTitleText.length(), mBoundRect);
            float textHeight = mBoundRect.height();
            int desired = (int) (getPaddingTop() + textHeight + getPaddingBottom());
            height = desired;
        }
        Log.e("lqm","width:"+width + "width："+width);
        setMeasuredDimension(width, height);
    }``

# 4. 重写onDraw #
    @Override
    protected void onDraw(Canvas canvas) {

        mPaint.setColor(Color.argb(5, 5, 5, 5));
        canvas.drawRect(0, 0, getMeasuredWidth(), getMeasuredHeight(), mPaint);

        mPaint.setColor(mTitleColor);
        canvas.drawText(mTitleText, getWidth() / 2 - mBoundRect.width() / 2,
                getHeight() / 2 + mBoundRect.height() / 2, mPaint);

    }

# 完整代码 #


    public class CustomTextView extends View {
    private final Rect mBoundRect;
    private Paint mPaint;
    private int mTitleSize;
    private int mTitleColor;
    private String mTitleText;

    public CustomTextView(Context context) {
        this(context, null);
    }

    public CustomTextView(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public CustomTextView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);

        /**
         * 获得自定义样式属性
         */
        TypedArray typedArray = context.getTheme().obtainStyledAttributes(attrs,
                R.styleable.CustomTextView, defStyleAttr, 0);
        int tepedIndexCount = typedArray.getIndexCount();
        for (int i = 0; i < tepedIndexCount; i++) {
            int attr = typedArray.getIndex(i);
            switch (attr) {
                case R.styleable.CustomTextView_titleText:
                    mTitleText = typedArray.getString(attr);
                    break;
                case R.styleable.CustomTextView_titleTextColor:
                    mTitleColor = typedArray.getColor(attr, Color.BLACK);
                    break;
                case R.styleable.CustomTextView_titleTextSize:
                    //默认设置为16sp,TypedValue也可以把sp转化为px
                    mTitleSize = typedArray.getDimensionPixelSize(attr, (int) TypedValue.applyDimension(
                            TypedValue.COMPLEX_UNIT_SP, 16, getResources().getDisplayMetrics()));
                    break;
            }
        }
        typedArray.recycle();

        /**
         * 获得绘文本的宽和高
         */
        mPaint = new Paint();
        mPaint.setTextSize(mTitleSize);
        mBoundRect = new Rect();
        mPaint.getTextBounds(mTitleText, 0, mTitleText.length(), mBoundRect);

        this.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                mTitleText = randomText();
                postInvalidate();
            }
        });
    }

    //获取随机数
    private String randomText() {
        Random random = new Random();
        Set<Integer> set = new HashSet<Integer>();
        while (set.size() < 4) {
            int randomInt = random.nextInt(10);
            set.add(randomInt);
        }
        StringBuffer sb = new StringBuffer();
        for (Integer i : set) {
            sb.append("" + i);
        }

        return sb.toString();
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        int widthMode = MeasureSpec.getMode(widthMeasureSpec);
        int widthSize = MeasureSpec.getSize(widthMeasureSpec);
        int heightMode = MeasureSpec.getMode(heightMeasureSpec);
        int heightSize = MeasureSpec.getSize(heightMeasureSpec);
        int width;
        int height;
        if (widthMode == MeasureSpec.EXACTLY) {
            width = widthSize;
        } else {
            mPaint.setTextSize(mTitleSize);
            mPaint.getTextBounds(mTitleText, 0, mTitleText.length(), mBoundRect);
            float textWidth = mBoundRect.width();
            int desired = (int) (getPaddingLeft() + textWidth + getPaddingRight());
            width = desired;
        }

        if (heightMode == MeasureSpec.EXACTLY) {
            height = heightSize;
        } else {
            mPaint.setTextSize(mTitleSize);
            mPaint.getTextBounds(mTitleText, 0, mTitleText.length(), mBoundRect);
            float textHeight = mBoundRect.height();
            int desired = (int) (getPaddingTop() + textHeight + getPaddingBottom());
            height = desired;
        }
        Log.e("lqm","width:"+width + "width："+width);
        setMeasuredDimension(width, height);
    }

    @Override
    protected void onDraw(Canvas canvas) {

        mPaint.setColor(Color.argb(5, 5, 5, 5));
        canvas.drawRect(0, 0, getMeasuredWidth(), getMeasuredHeight(), mPaint);

        mPaint.setColor(mTitleColor);
        canvas.drawText(mTitleText, getWidth() / 2 - mBoundRect.width() / 2,
                getHeight() / 2 + mBoundRect.height() / 2, mPaint);

    }
}




